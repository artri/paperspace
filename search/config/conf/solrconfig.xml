<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<config>
    <!-- Set this to 'false' if you want solr to continue working after it has
         encountered an severe configuration error.  In a production environment,
         you may want solr to keep working even if one handler is mis-configured.

         You may also set this to false using by setting the system property:
           -Dsolr.abortOnConfigurationError=false
       -->
    <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

    <luceneMatchVersion>8.2.0</luceneMatchVersion>
    <!-- Used to specify an alternate directory to hold all index data
         other than the default ./data under the Solr home.
         If replication is in use, this should match the replication configuration. -->
    <!--
    <dataDir>./solr/data</dataDir>
    -->
    <schemaFactory class="ClassicIndexSchemaFactory"/>
    <indexConfig>
        <!-- Values here affect all index writers and act as a default unless overridden. -->
        <useCompoundFile>false</useCompoundFile>
        <mergePolicyFactory class="org.apache.solr.index.TieredMergePolicyFactory">
            <int name="maxMergeAtOnce">10</int>
            <int name="segmentsPerTier">10</int>
        </mergePolicyFactory>
        <maxBufferedDocs>500</maxBufferedDocs>
        <maxFieldLength>10000</maxFieldLength>
        <writeLockTimeout>1000</writeLockTimeout>
        <commitLockTimeout>10000</commitLockTimeout>
        <lockType>single</lockType>
    </indexConfig>

    <!-- the default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- A prefix of "solr." for class names is an alias that
             causes solr to search appropriate packages, including
             org.apache.solr.(search|update|request|core|analysis)
         -->

        <!-- autocommit pending docs if certain criteria are met-->
        <autoCommit>
            <maxDocs>50</maxDocs>
            <maxTime>1000</maxTime>
        </autoCommit>


        <!-- The RunExecutableListener executes an external command.
             exe - the name of the executable to run
             dir - dir to use as the current working directory. default="."
             wait - the calling thread waits until the executable returns. default="true"
             args - the arguments to pass to the program.  default=nothing
             env - environment variables to set.  default=nothing
          -->
        <!-- A postCommit event is fired after every commit or optimize command
        <listener event="postCommit" class="solr.RunExecutableListener">
          <str name="exe">snapshooter</str>
          <str name="dir">solr/bin</str>
          <bool name="wait">true</bool>
          <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
          <arr name="env"> <str>MYVAR=val1</str> </arr>
        </listener>
        -->
        <!-- A postOptimize event is fired only after every optimize command, useful
             in conjunction with index distribution to only distribute optimized indicies
        <listener event="postOptimize" class="solr.RunExecutableListener">
          <str name="exe">snapshooter</str>
          <str name="dir">solr/bin</str>
          <bool name="wait">true</bool>
        </listener>
        -->

    </updateHandler>


    <query>
        <!-- Maximum number of clauses in a boolean query... can affect
            range or prefix queries that expand to big boolean
            queries.  An exception is thrown if exceeded.  -->
        <maxBooleanClauses>1024</maxBooleanClauses>


        <!-- Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.
             When a new searcher is opened, its caches may be prepopulated
             or "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For LRUCache,
             the autowarmed items will be the most recently accessed items.
           Parameters:
             class - the SolrCache implementation (currently only LRUCache)
             size - the maximum number of entries in the cache
             initialSize - the initial capacity (number of entries) of
               the cache.  (seel java.util.HashMap)
             autowarmCount - the number of entries to prepopulate from
               and old cache.
             -->
        <filterCache
                class="solr.FastLRUCache"
                size="98304"
                initialSize="32768"
                autowarmCount="0"/>

        <!-- queryResultCache caches results of searches - ordered lists of
              document ids (DocList) based on a query, a sort, and the range
              of documents requested.  -->
        <queryResultCache
                class="solr.LRUCache"
                size="98304"
                initialSize="16384"
                autowarmCount="0"/>

        <!-- documentCache caches Lucene Document objects (the stored fields for each document).
             Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
        <documentCache
                class="solr.LRUCache"
                size="10000"
                initialSize="1024"
                autowarmCount="0"/>

        <!-- If true, stored fields that are not requested will be loaded lazily.

        This can result in a significant speed improvement if the usual case is to
        not load all stored fields, especially if the skipped fields are large compressed
        text fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <queryResultWindowSize>250</queryResultWindowSize>

        <HashDocSet maxSize="500" loadFactor="0.75"/>

        <boolTofilterOptimizer enabled="true" cacheSize="32" threshold=".05"/>


        <useColdSearcher>true</useColdSearcher>

        <maxWarmingSearchers>3</maxWarmingSearchers>

    </query>


    <requestDispatcher handleSelect="true">
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048"/>
    </requestDispatcher>

    <!-- queryResponseWriter plugins... query responses will be written using the
      writer specified by the 'wt' request parameter matching the name of a registered
      writer.
      The "standard" writer is the default and will be used if 'wt' is not specified
      in the request. XMLResponseWriter will be used if nothing is specified here.
      The json, python, and ruby writers are also available by default.

      <queryResponseWriter name="standard" class="org.apache.solr.request.XMLResponseWriter"/>
      <queryResponseWriter name="json" class="org.apache.solr.request.JSONResponseWriter"/>
      <queryResponseWriter name="python" class="org.apache.solr.request.PythonResponseWriter"/>
      <queryResponseWriter name="ruby" class="org.apache.solr.request.RubyResponseWriter"/>

      <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
    -->

    <!-- &lt;!&ndash; XSLT response writer transforms the XML output by any xslt file found-->
    <!--      in Solr's conf/xslt directory.  Changes to xslt files are checked for-->
    <!--      every xsltCacheLifetimeSeconds.-->
    <!--  &ndash;&gt;-->
    <!-- <queryResponseWriter name="xslt" class="org.apache.solr.response.XSLTResponseWriter">-->
    <!--   <int name="xsltCacheLifetimeSeconds">7200</int>-->
    <!-- </queryResponseWriter>-->

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>solr</defaultQuery>
        <gettableFiles>solrconfig.xml schema.xml admin-extra.html</gettableFiles>
        <!-- pingQuery should be "URLish" ...
             &amp; separated key=val pairs ... but there shouldn't be any
             URL escaping of the values -->
        <pingQuery>
            qt=standard&amp;q=solrpingquery
        </pingQuery>
        <!-- configure a healthcheck file for servers behind a loadbalancer
        <healthcheck type="file">server-enabled</healthcheck>
        -->
    </admin>

</config>
